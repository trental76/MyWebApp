@using MudBlazor
@using MyWebApp.Models
@using MyWebApp.Models.Constants
@inject HttpClient Http


<MudTabs @bind-ActivePanelIndex="SelectedIndex" @onclick="() => OnActivated(SelectedIndex)">
    @foreach (var tab in SectionConstants.Sections)
    {
        <MudTabPanel Text="@tab">
            <MudPaper Style="padding: 16px;">
                <CardGrid Items="@Items" />
            </MudPaper>
        </MudTabPanel>
    }
</MudTabs>

@code {
    [Parameter] public EventCallback<int> OnTabChanged { get; set; }
    private int SelectedIndex;

    [Parameter] public List<SectionItem> Items { get; set; } = new List<SectionItem>();

    protected override async Task OnInitializedAsync()
    {
        // Initialize default tab
        SelectedIndex = SectionConstants.Sections.IndexOf(SectionConstants.DefaultSection);
        await LoadItemsForTab(SelectedIndex);
    }

    private async Task OnActivated(int tabIndex)
    {
        SelectedIndex = tabIndex;
        await LoadItemsForTab(tabIndex);
    }

    private async Task LoadItemsForTab(int tabIndex)
    {
        var tabName = SectionConstants.Sections.ElementAt(tabIndex);
        if (Cache.SectionCache.TryGetValue(tabName, out var value))
        {
            Items = value.ToList();
        }
        else
        {
            var encodedTabName = Uri.EscapeDataString(tabName);
            var url = string.Format(LambdaConstants.GetSectionItemsAPI, encodedTabName);

            var response = await Http.GetFromJsonAsync<IReadOnlyCollection<SectionItem>>(url);
            Items = response?.Count > 0 ? response.ToList() : new List<SectionItem>();
            Cache.SectionCache[tabName] = Items.ToList();
        }

        StateHasChanged();
    }
}
